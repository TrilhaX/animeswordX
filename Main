warn('[TEMPEST HUB] Loading Bypass')
wait(1)
warn('[TEMPEST HUB] Loading Ui')
wait(1)
local repo = 'https://raw.githubusercontent.com/TrapstarKSSKSKSKKS/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()
Library:Notify('Welcome to Tempest Hub', 5)

local Window = Library:CreateWindow({
    Title = 'Tempest Hub | Anime Sword',
    Center = false,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2
})

Library:Notify('Loading Anime Sword Script', 5)
warn('[TEMPEST HUB] Loading Function')
wait(1)
warn('[TEMPEST HUB] Loading Toggles')
wait(1)
warn('[TEMPEST HUB] Last Checking')
wait(1)

local TweenService = game:GetService("TweenService")
local speed = 1000

function tweenModel(model, targetCFrame)
    local duration = (model.PrimaryPart.Position - targetCFrame.Position).Magnitude / speed
    local info = TweenInfo.new(duration, Enum.EasingStyle.Linear)
    
    local cframeValue = Instance.new("CFrameValue")
    cframeValue.Value = model:GetPrimaryPartCFrame()
    
    cframeValue:GetPropertyChangedSignal("Value"):Connect(function()
        model:SetPrimaryPartCFrame(cframeValue.Value)
    end)
    
    local tween = TweenService:Create(cframeValue, info, {
        Value = targetCFrame,
    })
    
    tween:Play()
    tween.Completed:Connect(function()
        cframeValue:Destroy()
    end)
end

function GetCFrame(obj, height, angle)
    local cframe = CFrame.new()

    if typeof(obj) == "Vector3" then
        cframe = CFrame.new(obj)
    elseif typeof(obj) == "table" then
        cframe = CFrame.new(unpack(obj))
    elseif typeof(obj) == "string" then
        local parts = {}
        for val in obj:gmatch("[^,]+") do
            table.insert(parts, tonumber(val))
        end
        if #parts >= 3 then
            cframe = CFrame.new(unpack(parts))
        end
    elseif typeof(obj) == "Instance" then
        if obj:IsA("Model") then
            local rootPart = obj:FindFirstChild("HumanoidRootPart") or obj:FindFirstChild("Torso")
            if rootPart then
                cframe = rootPart.CFrame
            end
        elseif obj:IsA("Part") then
            cframe = obj.CFrame
        end
    end

    -- Apply height and angle adjustments
    if height then
        cframe = cframe + Vector3.new(0, height, 0)
    end
    if angle then
        cframe = cframe * CFrame.Angles(0, math.rad(angle), 0)
    end
    
    return cframe
end

function autoroll()
    while getgenv().autoroll == true do
        local args = {
            [1] = "Stars",
            [2] = "Roll",
            [3] = {
                ["Map"] = selectedMapRoll,
                ["Type"] = "Open"
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Bridge"):FireServer(unpack(args))
        wait()        
    end
end

function autocakeboss()
    while getgenv().autocakeboss == true do
        local args = {
            [1] = "Boss",
            [2] = "Start",
            [3] = "CakeBoss"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Bridge"):FireServer(unpack(args))
        local args = {
            [1] = "Attack",
            [2] = "Click",
            [3] = {
                ["Enemy"] = workspace:WaitForChild("Server"):WaitForChild("Enemies"):WaitForChild("Boss"):WaitForChild("Clown Island"):WaitForChild("Cake Mom"),
                ["Type"] = "Boss"
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Bridge"):FireServer(unpack(args))        
        wait()
    end
end

function KillAura()
    while getgenv().KillAura == true do
        local args = {
            [1] = "Attack",
            [2] = "Click",
            [3] = {
                ["Enemy"] = workspace:WaitForChild("Server"):WaitForChild("Enemies"):WaitForChild("World"):WaitForChild(selectedMap):WaitForChild(selectedEnemie),
                ["Type"] = "World"
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Bridge"):FireServer(unpack(args))
        wait()
    end
end

function autoequipbestsword()
    while getgenv().autoequipbestsword == true do
        local args = {
            [1] = "Swords",
            [2] = "Best"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Bridge"):FireServer(unpack(args))
        wait()
    end
end        

function autoequipbestpets()
    while getgenv().autoequipbestpets == true do
        local args = {
            [1] = "Pets",
            [2] = "Best"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Bridge"):FireServer(unpack(args))   
        wait()     
    end
end 

function autokillboss()
    while getgenv().autokillboss == true do
        local args = {
            [1] = "Attack",
            [2] = "Click",
            [3] = {
                ["Enemy"] = workspace:WaitForChild("Server"):WaitForChild("Enemies"):WaitForChild("Boss"):WaitForChild(selectedMap):WaitForChild(selectedBoss),
                ["Type"] = "Boss"
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Bridge"):FireServer(unpack(args))
        wait()        
    end
end

function autosellPets()
    while getgenv().autosellPets == true do
        -- Lista de elementos a serem ignorados
        local blacklist = {
            ["UIGridLayout"] = true,
            ["UIStroke"] = true,
        }

        -- Caminho para a lista de pets
        local petsListPath = game:GetService("Players").LocalPlayer.PlayerGui.UI.Frames.Inventory.Container.Background.Content.Pages.Pets.List.Frame
        local children = petsListPath:GetChildren()

        -- Cria uma nova tabela para armazenar os pets a serem vendidos
        local petsToSell = {}

        -- Filtra os pets que não estão na lista negra e os adiciona à lista de pets a serem vendidos
        for _, child in ipairs(children) do
            if not blacklist[child.Name] then
                table.insert(petsToSell, 1, child.Name) -- Adiciona o nome do pet à lista
            end
        end

        -- Vende os pets na lista
        for _, petName in ipairs(petsToSell) do
            local args = {
                [1] = "Pets",
                [2] = "Delete",
                [3] = {
                    [1] = petName
                }
            }
            -- Chama o servidor com os argumentos para vender o pet
            game:GetService("ReplicatedStorage"):WaitForChild("Bridge"):FireServer(unpack(args))
            wait(2)
        end
        wait(2) -- Ajuste este tempo de espera conforme necessário para evitar solicitações excessivas ao servidor
    end
end

function autosellSword()
    while getgenv().autosellSword == true do
        local blacklist = {
            ["UIGridLayout"] = true,
            ["UIStroke"] = true,
        }

        -- Caminho para a lista de pets
        local swordListPath = game:GetService("Players").LocalPlayer.PlayerGui.UI.Frames.Inventory.Container.Background.Content.Pages.Swords.List.Frame
        local children = swordListPath:GetChildren()

        -- Cria uma nova tabela para armazenar os pets a serem vendidos
        local swordsToSell = {}

        -- Filtra os pets que não estão na lista negra e os adiciona à lista de pets a serem vendidos
        for _, child in ipairs(children) do
            if not blacklist[child.Name] then
                table.insert(swordsToSell, 1, child.Name) -- Adiciona o nome do pet à lista
            end
        end

        -- Vende os pets na lista
        for _, swordname in ipairs(swordsToSell) do
        local args = {
            [1] = "Swords",
            [2] = "Delete",
            [3] = {
                [1] = swordname
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Bridge"):FireServer(unpack(args))        
        wait(2)
    end
    wait(2) -- Ajuste este tempo de espera conforme necessário para evitar solicitações excessivas ao servidor
    end
end

function walkspeed()
    local humanoid = game.Players.LocalPlayer.Character.Humanoid
    humanoid.WalkSpeed = speed
end

function JumpPower()
    local humanoid = game.Players.LocalPlayer.Character.Humanoid
    humanoid.JumpPower = JumpPower    
end


local ValuesEnemie = {}
local ValuesMap = {}
local ValuesBoss = {}

local map = game:GetService("ReplicatedStorage").Enemies
local children = map:GetChildren()

for _, child in ipairs(children) do
    table.insert(ValuesMap, child.Name)
    local enemies = child
    local children2 = enemies:GetChildren()

    for _, child2 in ipairs(children2) do
        table.insert(ValuesEnemie, child2.Name)
    end
end

-- Ensure ValuesMap and ValuesBoss are initialized as empty tables
local ValuesMap = {}
local ValuesBoss = {}

local map2 = game:GetService("ReplicatedStorage"):WaitForChild("Boss")

if map2 then
    local children3 = map2:GetChildren()

    for _, child3 in ipairs(children3) do
        table.insert(ValuesMap, child3.Name)
        local boss = child3
        local children4 = boss:GetChildren()

        for _, child4 in ipairs(children4) do
            table.insert(ValuesBoss, child4.Name)
        end
    end
else
    warn("Boss object not found in ReplicatedStorage")
end


local Tabs = {
    Main = Window:AddTab('Main'),
}

local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Player')

LeftGroupBox:AddToggle('autoBestSword', {
    Text = 'Auto Equip Best Sword',
    Default = false,
    Callback = function(Value)
        getgenv().autoequipbestsword = Value
        if Value then
            autoequipbestsword() -- Iniciar o autofarm apenas se estiver ativado
        end
    end
})

LeftGroupBox:AddToggle('AutobestPet', {
    Text = 'Auto Equip Best Pet',
    Default = false,
    Callback = function(Value)
        getgenv().autoequipbestpets = Value
        if Value then
            autoequipbestpets() -- Iniciar o autofarm apenas se estiver ativado
        end
    end
})

LeftGroupBox:AddSlider('Walkspeed', {
    Text = 'Walkspeed',
    Default = 0,
    Min = 20,
    Max = 200,
    Rounding = 1,
    Compact = false,

    Callback = function(Value)
        speed = Value
    end
})

LeftGroupBox:AddSlider('JumpPower', {
    Text = 'JumpPower',
    Default = 0,
    Min = 20,
    Max = 200,
    Rounding = 1,
    Compact = false,

    Callback = function(Value)
        JumpPower = Value
    end
})

local RightGroupBox = Tabs.Main:AddRightGroupbox('Farm')

RightGroupBox:AddDropdown('Map', {
    Values = ValuesMap,
    Default = "None",
    Multi = false,
    Text = 'Choose Map',
    Callback = function(value)
        selectedMap = value
    end
})

RightGroupBox:AddDropdown('Enemie', {
    Values = ValuesEnemie,
    Default = "None",
    Multi = false,
    Text = 'Choose Mob',
    Callback = function(value)
        selectedEnemie = value
    end
})

RightGroupBox:AddToggle('AutoKill', {
    Text = 'Auto Kill + Farm Energy',
    Default = false,
    Callback = function(Value)
        getgenv().KillAura = Value
        if Value then
            KillAura() -- Iniciar o autofarm apenas se estiver ativado
        end
    end
})

RightGroupBox:AddDropdown('Map', {
    Values = ValuesMap,
    Default = "None",
    Multi = false,
    Text = 'Choose Map',
    Callback = function(value)
        selectedMap = value
    end
})


RightGroupBox:AddDropdown('Boss', {
    Values = ValuesBoss,
    Default = "None",
    Multi = false,
    Text = 'Choose Boss',
    Callback = function(value)
        selectedBoss = value
    end
})

RightGroupBox:AddToggle('AutoKill', {
    Text = 'Auto Kill Boss',
    Default = false,
    Callback = function(Value)
        getgenv().autokillboss = Value
        if Value then
            autokillboss() -- Iniciar o autofarm apenas se estiver ativado
        end
    end
})

RightGroupBox:AddToggle('AutoCakeBoss', {
    Text = 'Auto Cake Boss',
    Default = false,
    Callback = function(Value)
        getgenv().autocakeboss = Value
        if Value then
            autocakeboss() -- Iniciar o autofarm apenas se estiver ativado
        end
    end
})

local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Summon')

LeftGroupBox:AddDropdown('Map', {
    Values = ValuesMap,
    Default = "None",
    Multi = false,
    Text = 'Choose Map',
    Callback = function(value)
        selectedMapRoll = value
    end
})

LeftGroupBox:AddToggle('AutoRoll', {
    Text = 'Auto Roll',
    Default = false,
    Callback = function(Value)
        getgenv().autoroll = Value
        if Value then
            autoroll() -- Iniciar o autofarm apenas se estiver ativado
        end
    end
})


LeftGroupBox:AddToggle('AutoKill', {
    Text = 'Auto Sell Pets',
    Default = false,
    Callback = function(Value)
        getgenv().autosellPets = Value
        if Value then
            autosellPets() -- Iniciar o autofarm apenas se estiver ativado
        end
    end
})

LeftGroupBox:AddToggle('AutoKill', {
    Text = 'Auto Sell Swords',
    Default = false,
    Callback = function(Value)
        getgenv().autosellSword = Value
        if Value then
            autosellSword() -- Iniciar o autofarm apenas se estiver ativado
        end
    end
})

local FrameTimer = tick()
local FrameCounter = 0
local FPS = 60

local WatermarkConnection

-- Create a function to update FPS and ping information
local function UpdateWatermark()
    FrameCounter = FrameCounter + 1

    if (tick() - FrameTimer) >= 1 then
        FPS = FrameCounter
        FrameTimer = tick()
        FrameCounter = 0
    end

    Library:SetWatermark(('Tempest Hub | %s fps | %s ms'):format(
        math.floor(FPS),
        math.floor(game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue())
    ))
end

-- Connect the function to the RenderStepped event
WatermarkConnection = game:GetService('RunService').RenderStepped:Connect(UpdateWatermark)

-- Create tabs for UI settings
local TabsUI = {
    ['UI Settings'] = Window:AddTab('UI Settings'),
}

-- Unload function
local function Unload()
    WatermarkConnection:Disconnect()
    print('Unloaded!')
    Library.Unloaded = true
end

-- UI Settings
local MenuGroup = TabsUI['UI Settings']:AddLeftGroupbox('Menu')

-- Add an unload button
MenuGroup:AddButton('Unload', Unload)

-- Add a label and key picker for the menu keybind
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })

-- Define the ToggleKeybind variable
Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

ThemeManager:SetFolder('Tempest Hub')
SaveManager:SetFolder('Tempest Hub/_anime_sword_x')

SaveManager:BuildConfigSection(TabsUI['UI Settings'])

ThemeManager:ApplyToTab(TabsUI['UI Settings'])

SaveManager:LoadAutoloadConfig()

local GameConfigName = '_anime_sword_x'
local player = game.Players.LocalPlayer
SaveManager:Load(player.Name .. GameConfigName)
spawn(function()
    while task.wait(1) do
        if Library.Unloaded then
            break
        end
        SaveManager:Save(player.Name .. GameConfigName)
    end
end)

-- Disable player idling
for i,v in pairs(getconnections(game.Players.LocalPlayer.Idled)) do
    v:Disable()
end
warn('[TEMPEST HUB] Loaded')
